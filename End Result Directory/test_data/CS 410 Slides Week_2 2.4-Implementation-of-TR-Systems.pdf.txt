implementation of text retrieval systems cheng xiang department of computer science university of illinois at urbana champaign implementation of text retrieval systems big textdata small relevant data search engine recommend er system text access 11 recommendation text retrieval problem 10 web search user natural language content analysis text retrieval methods system implementation evaluation vector space model probabilistic model feedback typical tr system architecture user query docs results query rep doc rep index scorer index er token ize index judgments feedback offline online offline online token iz ation normalize lexical units words with similar meanings should be mapped to the same indexing term stemming mapping all inflectional forms of words to the same root for meg computer compute computation compute computing compute some languages eg chinese pose challenges in word segmentation indexing indexing convert documents to data structures that enable fast search pre computing as much as we can inverted index is the dominating indexing method for supporting basic search algorithms other indices eg document index maybe needed for feedback docid fr eq 112131213132216 inverted index example doc dictionary or lexicon postings term docs total fr eq news 33 campaign 22 presidential 12 food 11 news of presidential campaign presidential news about organic food campaign doc news about doc position inverted index for fast search single term query multi term boolean query multi term keyword query aggregate term weights more efficient than sequentially scanning docs why empirical distribution of words there are stable language independent patterns in how people use natural languages few words occur very frequently most occur rarely eg in news articles top words 1015 word occurrences top 50 words 3540 word occurrences the most frequent word in one corpus maybe rare in another rank frequency constant word fr eq word rank by fr eq intermediate frequency words highest frequency biggest data structures top words many rare words 10 data structures for inverted index dictionary modest size needs fast random access preferred to be in memory hash table tree trie postings huge sequential access is expected can stay on disk may contain docid term fr eq term pos etc compression is desirable
